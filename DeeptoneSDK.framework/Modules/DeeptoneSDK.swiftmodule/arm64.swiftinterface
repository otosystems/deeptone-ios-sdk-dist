// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name DeeptoneSDK
import AVFoundation
import Alamofire
import AwaitKit
import CryptoSwift
@_exported import DeeptoneSDK
import Foundation
import PromiseKit
import RealmSwift
import SSZipArchive
import Swift
import SwiftJWT
import SwiftyJSON
import TensorFlowLite
public struct EmotionPrediction {
  public var happy: Swift.Float
  public var irritated: Swift.Float
  public var neutral: Swift.Float
  public var tired: Swift.Float
}
public struct GenderPrediction {
  public var gender: Swift.Float
}
public struct SpeechPrediction {
  public var music: Swift.Float
  public var noise: Swift.Float
  public var speech: Swift.Float
}
public struct DeeptoneOutput {
  public var emotions: [DeeptoneSDK.EmotionPrediction]
  public var genders: [DeeptoneSDK.GenderPrediction]
  public var speeches: [DeeptoneSDK.SpeechPrediction]
  public var identity: [[Swift.Float]]
  public var anonymizedIdentity: [[Swift.Float]]
  public var anonymizedEmotions: [DeeptoneSDK.EmotionPrediction]
}
public typealias DeeptoneOnData = (DeeptoneSDK.DeeptoneOutput) -> Swift.Void
public typealias DeeptoneOnError = (DeeptoneSDK.DeeptoneSDKError) -> Swift.Void
public typealias DeeptoneOnSuccess = (DeeptoneSDK.DeeptoneOutput) -> Swift.Void
public enum DeeptoneStartResult {
  case Success
  case Failure(DeeptoneSDK.DeeptoneSDKError)
}
public class Deeptone {
  public init(key: Swift.String, modelPath: Swift.String)
  public func start(completion: @escaping (DeeptoneSDK.DeeptoneStartResult) -> Swift.Void)
  public func loadAudioFile(filePath: Swift.String) throws -> DeeptoneSDK.DeeptoneOutput
  public func stream(onData: @escaping DeeptoneSDK.DeeptoneOnData, onSuccess: @escaping DeeptoneSDK.DeeptoneOnSuccess, onError: @escaping DeeptoneSDK.DeeptoneOnError) throws -> DeeptoneSDK.DeeptoneStream
  @objc deinit
}
public enum DeeptoneSDKError : Swift.Error {
  case invalidAudioFile
  case UnexpectedError
  case invalidModelFile
  case expiredSDK
  case invalidLicenseKey
  case sdkNotStarted
  public static func == (a: DeeptoneSDK.DeeptoneSDKError, b: DeeptoneSDK.DeeptoneSDKError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@_hasMissingDesignatedInitializers public class DeeptoneStream {
  public func write(audioBuffer: AVFoundation.AVAudioPCMBuffer)
  public func close()
  @objc deinit
}
public enum DeeptoneSDKInfo : Swift.String {
  case cantWriteToClosedStream
  case streamIsAlreadyClosed
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
extension DeeptoneSDK.DeeptoneSDKError : Swift.Equatable {}
extension DeeptoneSDK.DeeptoneSDKError : Swift.Hashable {}
extension DeeptoneSDK.DeeptoneSDKInfo : Swift.Equatable {}
extension DeeptoneSDK.DeeptoneSDKInfo : Swift.Hashable {}
extension DeeptoneSDK.DeeptoneSDKInfo : Swift.RawRepresentable {}
